# Ubicaci?n de la db (puede ser en memoria o en archivo, recomendable en archivo as? persiste)
# La segunda configuracion DATABASE_TO_UPPER deshabilita que se transforme todo en mayusculas
spring.datasource.url=jdbc:h2:file:./data/coderHouse;DATABASE_TO_UPPER=false

# Establece el nombre de la clase del controlador JDBC
spring.datasource.driverClassName=org.h2.Driver

# Esta configuración le dice a Hibernate, el ORM (Object-Relational Mapping)
# utilizado por Spring Data JPA, qué dialecto de base de datos debe usar para generar las consultas SQL
# y mapear los tipos de datos.
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect

# Datos de acceso
spring.datasource.username=sa
spring.datasource.password=

# Estas 5 primeras propiedades forman parte de la unidad de persistencia (PU)

#-------------------------------------------------------------------------

server.port=8888

# Es útil para habilitar la impresión de las sentencias SQL generadas por Hibernate en la consola.
# Cuando esta propiedad se establece en true, Hibernate imprimirá las sentencias SQL que está ejecutando
# en la base de datos en la consola de registro.
# Esto es útil para depurar y comprender las consultas SQL generadas por JPA y Hibernate.
spring.jpa.show-sql=true


# Se utiliza para formatear las sentencias SQL generadas por Hibernate antes de imprimirlas en la consola
spring.jpa.properties.hibernate.format_sql=true

#Habilitar la consola de h2 para acceder desde el browser
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


#----------------------------------
#Esperar a que cargue hibernate antes de acceder a schema-anulado.sql
spring.jpa.defer-datasource-initialization=true

#No sincronizar las clases definidas en las entidades con la base de datos existente.
spring.jpa.hibernate.ddl-auto=create-drop